---
import type {IOption} from '../interfaces';

interface Props {
  options: IOption[];
}

const {options}: Props = Astro.props;

const sortParam: string = 'sort';

const currentAlias: string = Astro.url.searchParams.get(sortParam) || 'popular';
const currentTitle: string = options.find(
  (option: IOption): boolean => option.alias === currentAlias)?.title || options[0].title;
const otherOptions: IOption[] = options.filter((option: IOption): boolean => option.alias !== currentAlias);
---

<section class="section-filters">
  <link rel="stylesheet" href="./components/section-filters.css"/>
  <button type="button" class="util-button primary filter-button" data-popup-open="filters">
    <img src="./images/filter.png" alt="" width="21" height="21"/>
    <span>Фильтры</span>
  </button>
  <details class="sort-dropdown">
    <summary class="util-button secondary sort-header" data-sort-current
             data-sort-param={sortParam} data-sort-value={currentAlias}>
      <span>{currentTitle}</span>
      <svg class="svg" width="12" height="8" viewBox="0 0 12 8" xmlns="http://www.w3.org/2000/svg">
        <path d="M11.5 0.919922L6 6.91992L0.5 0.919922" stroke="#27282B" stroke-linecap="round"
              stroke-linejoin="round"/>
      </svg>
    </summary>
    <div class="sort-main">
      {otherOptions.map(({alias, title}: IOption) => (
        <button type="button" class="sort-link" data-sort-option data-sort-param={sortParam} data-sort-value={alias}>
          <span>{title}</span>
        </button>
      ))}
    </div>
  </details>
  <script src="./components/section-filters.js" is:inline async></script>
</section>
